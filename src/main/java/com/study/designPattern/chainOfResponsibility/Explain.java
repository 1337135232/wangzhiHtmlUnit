package com.study.designPattern.chainOfResponsibility;

public class Explain {

	//chainOfResponsibility 职责链模式
	//定义：为了避免请求的发送者和接收者之间的耦合关系，使多个接受对象都有机会处理请求。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。
	
	//状态模式解决的问题：状态模式主要解决的是当控制一个对象状态的条件表达式过于复杂时的情况。
	//把状态的判断逻辑转移到表示不同状态的一系列类中，可以把复杂的判断逻辑简化。
	
	/**
	 * 用专业点的语言来说，就是下面两点。
                1、客户端与具体的处理者解耦，客户端只认识一个Hanlder接口，降低了客户端（即请求发送者）与处理者的耦合度。
                2、客户端和处理者都不关心职责链的具体结构，而是交给职责链的创造者（在上述例子当中则是交给了OrderManager），
                	也正因为如此，当在职责链中添加处理者的时候，这对客户端和处理者来说，都是透明的，二者不知道也不必要知道职责链的变化。
                	
       其主要缺点在于不能保证请求一定被接收，
       且对于比较长的职责链，请求的处理可能涉及到多个处理对象，系统性能将受到一定影响，而且在进行代码调试时不太方便。
	 */
	
	/**
	 * 应用场景：打电话叫麦当劳点餐，一个分店一个分店打电话。
	 * 使用职责链模式后，变成只需要打一个分店电话，然后分店自己去给自己的分店打电话帮我联系，满足我的点餐需求。最后通知我。
	 * 好处：不需要我一个一个打电话，只需要打一个电话就够了。
	 */
	
	/**
	 * 职责链的代码设计精髓就是为McSubbranch对象的nextSubbranch属性，设置对象，从而形成一个链条。而设置的方式可以由一个单独的类去做
	 */
}
